package com.fisherevans.com.projectEuler;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Created with IntelliJ IDEA.
 * User: immortal
 * Date: 12/11/13
 * Time: 5:12 PM
 * To change this template use File | Settings | File Templates.
 */
public class SimpleProblems
{
    /**
     * http://projecteuler.net/problem=1
     *
     * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these
     * multiples is 23.
     *
     * Find the sum of all the multiples of 3 or 5 below 1000.
     *
     * @param limit
     * @return sum of all the multiples of 3 or 5 below the limit
     */
    public static long problemOne(long limit)
    {
        long sum = 0;
        for(int i = 3;i < limit;i++)
            if(i % 3 == 0 || i % 5 == 0)
                sum += i;
        return sum;
    }

    /**
     * http://projecteuler.net/problem=2
     *
     * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
     * the first 10 terms will be:
     *
     * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
     *
     * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
     * even-valued terms.
     *
     * @param limit
     * @return sum of the even-valued terms of the Fibonacci sequence below the limit
     */
    public static long problemTwo(long limit)
    {
        if(limit < 2)
            return 0;
        long sum = 2, beforeLast = 1, last = 2, current = 3;
        while(current < limit)
        {
            if(current % 2 == 0)
                sum += current;
            beforeLast = last;
            last = current;
            current = beforeLast + last;
        }
        return sum;
    }

    /**
     * http://projecteuler.net/problem=3
     *
     * The prime factors of 13195 are 5, 7, 13 and 29.
     *
     * What is the largest prime factor of the number 600851475143 ?
     *
     * @param number
     * @return the largest prime factor of the number
     */
    public static long problemThree(long number)
    {
        for(long i = 2;i < number/2;i++)
        {
            if(number % i == 0)
            {
                number /= i;
                i = 2;
            }
        }
        return number;
    }

    /**
     * http://projecteuler.net/problem=4
     *
     * A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit
     * numbers is 9009 = 91 Ã— 99.
     *
     * Find the largest palindrome made from the product of two 3-digit numbers.
     *
     * @param digit
     * @return the largest palindrome made from the product of two digit-digit numbers.
     */
    public static long problemFour(long digit)
    {
        long maxNumber = 0;
        for(long dec = 0;dec < digit;dec++)
            maxNumber += 9*Math.pow(10, dec);
        long incFactor, decFactor, number;
        String numberString;
        for(long midNumber = maxNumber;midNumber > 0;midNumber--)
        {
            for(short shift = 0;shift >= -1;shift--)
            {
                incFactor = midNumber;
                decFactor = midNumber+shift;
                while(incFactor <= maxNumber)
                {
                    number = incFactor*decFactor;
                    numberString = number + "";
                    if(numberString.equals(new StringBuilder(numberString).reverse().toString()))
                        return number;

                    incFactor++;
                    decFactor--;
                }
            }
        }
        return -1;
    }
}
